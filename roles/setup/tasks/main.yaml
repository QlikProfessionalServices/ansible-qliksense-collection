---
- name: Check EULA has been accepted
  ansible.builtin.assert:
    that: accept_eula is true
    fail_msg: "You must accept the EULA (C(accept_eula: true)) to install Qlik Sense."
    success_msg: EULA has been accepted.

- name: Check DB password for invalid characters
  ansible.builtin.assert:
    that:
      - db_password is defined
      - "'\"' not in db_password"
      - '"''" not in db_password'
      - "';' not in db_password"
      - "':' not in db_password"
      - "'/' not in db_password"
      - '"\\" not in db_password'
      - "'.' not in db_password"
      - "'>' not in db_password"
      - "'<' not in db_password"
      - "',' not in db_password"
    fail_msg: "The password you entered contains a forbidden character \"';:/.>,"

- name: Create shared persistence configuration file
  ansible.windows.win_template:
    src: spc.cfg.j2
    dest: "{{ shared_persistance_config }}"

- name: Install Qlik Sense Enterprise Server
  ansible.windows.win_package:
    creates_service: QlikSenseRepositoryService
    path: "{{ setup_path }}"
    arguments:
      - -silent
      - accepteula={{ accept_eula | int }}
      - desktopshortcut={{ desktop_shortcut | int }}
      - skipstartservices={{ update_path is defined | default(skip_start_services) | int }}
      - userwithdomain={{ user_with_domain }}
      - userpassword={{ user_password }}
      - dbpassword={{ db_password }}
      - hostname={{ hostname | default('') }}
      - sharedpersistenceconfig={{ shared_persistance_config | ansible.windows.quote }}
      - senddata={{ send_data | default(0) | int }}
      - skipvalidation={{ skip_validation | default(0) | int }}
      - bundleinstall={{ bundle_install | default([]) | join(',') }}

- name: Get update version info
  check_mode: no
  ansible.windows.win_powershell:
    script: $Ansible.Result = (Get-Item '{{ update_path | default('') }}').VersionInfo
  register: update_version
  changed_when: false
  when: update_path is defined

- name: Check if update is installed
  check_mode: no
  ansible.windows.win_powershell:
    script: |
      $Ansible.Result = (Get-Package -Name '{{ update_version.result.ProductName }}' -ErrorAction Ignore)
      $null -ne $Ansible.Result
  register: update_installed
  changed_when: not update_installed.output.0
  when: update_path is defined

- name: Check for pending reboot
  ansible.windows.win_reg_stat:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager
    name: PendingFileRenameOperations
  when: update_installed.output is defined and not update_installed.output.0
  register: pending_file_renames

- name: Check for uninstalled Qlik Sense updates
  check_mode: no
  ansible.windows.win_powershell:
    script: (Get-Item '{{ item[4:] }}').VersionInfo
  loop: "{{ pending_file_renames.value | select('search', 'Qlik_Sense_update\\.exe$') }}"
  changed_when: false
  register: pkgcache_version
  when: pending_file_renames.value is defined

- name: Reboot without restarting services
  when: pkgcache_version.results is defined
        and pkgcache_version.results
          | map(attribute='output')
          | flatten
          | selectattr('ProductVersion', 'equalto', update_version.result.ProductVersion)
          | length > 0
  block:
    - name: Get Qlik Sense service state
      ansible.windows.win_service_info:
        name: Qlik*
      register: sense_service_info

    - name: Set Qlik Sense services to manual start
      ansible.windows.win_service:
        name: "{{ item.name }}"
        start_mode: manual
      loop: "{{ sense_service_info.services | selectattr('start_mode', 'in', ['auto', 'delayed']) }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Reboot the machine
      ansible.windows.win_reboot:

    - name: Restore Qlik Sense services start mode
      ansible.windows.win_service:
        name: "{{ item.name }}"
        start_mode: "{{ item.start_mode }}"
      loop: "{{ sense_service_info.services | selectattr('start_mode', 'in', ['auto', 'delayed']) }}"
      loop_control:
        label: "{{ item.name }} [{{ item.start_mode }}]"

- name: Install Qlik Sense update
  ansible.windows.win_package:
    path: "{{ update_path }}"
    arguments:
      - install
      - startservices={{ (not skip_start_services) | default(1) | int }}
  when: update_path is defined and not update_installed.output.0

- name: Start Repository database
  ansible.windows.win_service:
    name: QlikSenseRepositoryDatabase
    state: started
  when: install_local_db and not skip_start_services

- name: Start Qlik Sense services
  ansible.windows.win_service:
    name: "{{ item }}"
    state: started
  loop:
    - QlikSenseServiceDispatcher
    - QlikSenseRepositoryService
    - QlikSenseProxyService
    - QlikSenseEngineService
    - QlikSenseSchedulerService
    - QlikSensePrintingService
  when: not skip_start_services

- name: Wait for Qlik Sense services to start
  ansible.windows.win_uri:
    url: "https://{{ ansible_facts.hostname }}/qps/user"
    follow_redirects: none
    method: GET
    validate_certs: no
  register: _result
  until: _result.status_code == 200
  retries: 30
  delay: 10
  when: not skip_start_services
